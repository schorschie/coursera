Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of
questions that will help you profile and understand the data just like a data
scientist would. For this first part of the assignment, you will be assessed
both on the correctness of your findings, as well as the code you used to arrive
at your answer. You will be graded on how easy your code is to read, so remember
to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own
inferences and analysis of the data for a particular research question you want
to answer. You will be required to prepare the dataset for the analysis you
choose to do. As with the first part, you will be graded, in part, on how easy
your code is to read, so use proper formatting and comments to illustrate and
communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the
questions you are being asked, and your job will be to transfer your answers and
SQL coding where indicated into this worksheet so that your peers can review
your work. You should be able to use any Text Editor (Windows Notepad, Apple
TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you
are going to use Word or some other page layout application, just be careful to
make sure your answers and code are lined appropriately. In this case, you may
want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000 
ii. Business table = 10000 
iii. Category table = 10000 
iv. Checkin table = 10000
v. elite_years table = 10000 
vi. friend table = 10000 
vii. hours table = 10000 
viii. photo table = 10000 
ix. review table = 10000 
x. tip table = 10000 
xi. user table = 10000 
	


2. Find the total distinct records by either the foreign key or primary key for
each table. If two foreign keys are listed in the table, please specify which
foreign key.

i. Business = 10000 distinct primary keys 'id'  // it would be really strange if
                                                // there weren't 10000 distinct
                                                // primary keys
ii. Hours = 1562 distinct foreign keys 'business_id'
iii. Category = 2643 distinct foreign keys 'business_id'
iv. Attribute = 1115 distinct foreign keys 'business_id'
v. Review = 8090 distinct foreign keys 'business_id' and
            9581 distinct foreign keys 'user_id'
vi. Checkin =  493 distinct foreign keys 'business_id'
vii. Photo = 6493 distinct foreign keys 'business_id'
viii. Tip = 537  distinct foreign keys 'user_id' and
            3979 distinct foreign keys 'business_id'
ix. User = 10000 distinct primary keys
x. Friend = 11 distinct foreign keys 'user_id'
xi. Elite_years = 2780 distinct foreign keys 'user_id'

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	
	SELECT
    	COUNT(*)
	FROM user
	WHERE compliment_photos IS NULL; // Do this for every column. Alternatively
	                                 // combine all columns with OR statements,
	                                 // but then you wouldn't know which column
									 // is NULL.
	

	
4. For each table and column listed below, display the smallest (minimum),
largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1		max: 5		avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000		avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT
		business.city,
		COUNT(review_count) AS Reviews
	FROM business
	GROUP BY city
	ORDER BY Reviews DESC;
	
	Copy and Paste the Result Below:
		
+-----------------+---------+
| city            | Reviews |
+-----------------+---------+
| Las Vegas       |    1561 |
| Phoenix         |    1001 |
| Toronto         |     985 |
| Scottsdale      |     497 |
| Charlotte       |     468 |
| Pittsburgh      |     353 |
| Montréal        |     337 |
| Mesa            |     304 |
| Henderson       |     274 |
| Tempe           |     261 |
| Edinburgh       |     239 |
| Chandler        |     232 |
| Cleveland       |     189 |
| Gilbert         |     188 |
| Glendale        |     188 |
| Madison         |     176 |
| Mississauga     |     150 |
| Stuttgart       |     141 |
| Peoria          |     105 |
| Markham         |      80 |
| Champaign       |      71 |
| North Las Vegas |      70 |
| North York      |      64 |
| Surprise        |      60 |
| Richmond Hill   |      54 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT 
    stars,
    review_count
FROM business
WHERE city = 'Avon'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------+
| stars | review_count |
+-------+--------------+
|   1.5 |           10 |
|   2.5 |            3 |
|   3.5 |           50 |
|   4.0 |           17 |
|   4.5 |           31 |
|   5.0 |            3 |
+-------+--------------+


ii. Beachwood

SQL code used to arrive at answer:

SELECT 
    stars,
    review_count
FROM business
WHERE city = 'Beachwood'
GROUP BY stars;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):

+-------+--------------+
| stars | review_count |
+-------+--------------+
|   2.0 |            8 |
|   2.5 |            3 |
|   3.0 |            3 |
|   3.5 |            3 |
|   4.0 |           69 |
|   4.5 |            3 |
|   5.0 |            4 |
+-------+--------------+



7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
SELECT
    name,
    review_count
FROM user
ORDER BY review_count DESC
LIMIT 3;
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

SELECT
    name,
    review_count,
    fans
FROM user
ORDER BY review_count ASC;

+---------------+--------------+------+
| name          | review_count | fans |
+---------------+--------------+------+
| Sonnenschein1 |            0 |    0 |
| svenher       |            0 |    0 |
| Schweinefe    |            0 |    0 |
| Luke          |            0 |    0 |
| Limon-Du      |            0 |    0 |
| ab            |            0 |    0 |
| torstenbec    |            0 |    0 |
| snek          |            0 |    0 |
|               |            0 |    0 |
| Joe           |            1 |    0 |
| Lyndsey       |            1 |    0 |
| Qi            |            1 |    0 |
| Sachin        |            1 |    0 |
| Mary          |            1 |    0 |
| Gwen          |            1 |    0 |
| Kimmie        |            1 |    0 |
| Rosa Maria    |            1 |    0 |
| Carl          |            1 |    0 |
| Michael       |            1 |    0 |
| Tony          |            1 |    0 |
| Regina        |            1 |    0 |
| A             |            1 |    0 |
| Sa            |            1 |    0 |
| Mishelle      |            1 |    0 |
| Rachel        |            1 |    0 |
+---------------+--------------+------+

SELECT
    name,
    review_count,
    fans
FROM user
ORDER BY review_count DESC;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Gerald    |         2000 |  253 |
| Sara      |         1629 |   50 |
| Yuri      |         1339 |   76 |
| .Hon      |         1246 |  101 |
| William   |         1215 |  126 |
| Harald    |         1153 |  311 |
| eric      |         1116 |   16 |
| Roanna    |         1039 |  104 |
| Mimi      |          968 |  497 |
| Christine |          930 |  173 |
| Ed        |          904 |   38 |
| Nicole    |          864 |   43 |
| Fran      |          862 |  124 |
| Mark      |          861 |  115 |
| Christina |          842 |   85 |
| Dominic   |          836 |   37 |
| Lissa     |          834 |  120 |
| Lisa      |          813 |  159 |
| Alison    |          775 |   61 |
| Sui       |          754 |   78 |
| Tim       |          702 |   35 |
| L         |          696 |   10 |
| Angela    |          694 |  101 |
| Crissy    |          676 |   25 |
| Lyn       |          675 |   45 |
+-----------+--------------+------+

Writing more reviews seems to yield in more fans, but the variety in the last 25
statement is so high (from 10 fans to 497) that the correlation would not be that
strong. 

SELECT
    name,
    review_count,
    fans
FROM user
ORDER BY fans DESC;

+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+

Also the last query shows, that users which have many fans, also tent to write
many reviews.




9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: hate: 232, love: 1780
	There are more reviews with the word 'love', than 'hate'.
	
	SQL code used to arrive at answer:

SELECT
    COUNT(*)
FROM review
WHERE LOWER(text) LIKE "%hate%";   /* or "%love%" */

	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT
    name,
    review_count,
    fans
FROM user
ORDER BY fans DESC;

	
	Copy and Paste the Result Below:
	
+-----------+--------------+------+
| name      | review_count | fans |
+-----------+--------------+------+
| Amy       |          609 |  503 |
| Mimi      |          968 |  497 |
| Harald    |         1153 |  311 |
| Gerald    |         2000 |  253 |
| Christine |          930 |  173 |
| Lisa      |          813 |  159 |
| Cat       |          377 |  133 |
| William   |         1215 |  126 |
| Fran      |          862 |  124 |
| Lissa     |          834 |  120 |
| Mark      |          861 |  115 |
| Tiffany   |          408 |  111 |
| bernice   |          255 |  105 |
| Roanna    |         1039 |  104 |
| Angela    |          694 |  101 |
| .Hon      |         1246 |  101 |
| Ben       |          307 |   96 |
| Linda     |          584 |   89 |
| Christina |          842 |   85 |
| Jessica   |          220 |   84 |
| Greg      |          408 |   81 |
| Nieves    |          178 |   80 |
| Sui       |          754 |   78 |
| Yuri      |         1339 |   76 |
| Nicole    |          161 |   73 |
+-----------+--------------+------+
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that
city or category by their overall star rating. Compare the businesses with 2-3
stars to the businesses with 4-5 stars and answer the following questions.
Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of
hours?

Not really. The weekday openings do not have an influence on the rating
range, except on Sundays, but I consider the amount of data to low.


ii. Do the two groups you chose to analyze have a different number of reviews?
         
The 'nice' places have factor 10 times more reviews.
         
iii. Are you able to infer anything from the location data provided between
these two groups? Explain.

The _average_ longitude of the 'nice' places is far more west. That could have
multiple sources. Either the locations in the west are generally nicer, or the
people in the west tent to nicer evaluations, or it is just the high amount of
'Las Vegas' businesses, which skews the numbers. I can't say un such a short
notice.

SQL code used for analysis:

SELECT
    COUNT(*) AS 'Number of Restaurants',
    CASE
        WHEN b.stars BETWEEN 2 AND 3 THEN 'Average'
        WHEN b.stars BETWEEN 4 AND 5 THEN 'Nice'
    END AS Rating,
    CASE
        WHEN h.hours LIKE '%Monday%' THEN '1 Mondays'
        WHEN h.hours LIKE '%Tuesday%' THEN '2 Tuesdays'
        WHEN h.hours LIKE '%Wednesday%' THEN '3 Wednesdays'
        WHEN h.hours LIKE '%Thursday%' THEN '4 Thursdays'
        WHEN h.hours LIKE '%Friday%' THEN '5 Fridays'
        WHEN h.hours LIKE '%Saturday%' THEN '6 Saturdays'
        WHEN h.hours LIKE '%Sunday%' THEN '7 Sundays'
    END AS Weekday,
    sum(b.review_count),
    avg(b.latitude),
    avg(b.longitude)
FROM business AS b LEFT JOIN category as c
    ON b.id = c.business_id LEFT JOIN 
    hours as h
    ON b.id = h.business_id
WHERE (c.category = 'Restaurants' OR   /* OR, as stated in the question */
    b.city = 'Las Vegas') AND
    h.business_id IS NOT NULL AND
    Rating IS NOT NULL
GROUP BY Rating, Weekday
ORDER BY Rating, Weekday;

+-----------------------+---------+--------------+---------------------+-----------------+------------------+
| Number of Restaurants | Rating  | Weekday      | sum(b.review_count) | avg(b.latitude) | avg(b.longitude) |
+-----------------------+---------+--------------+---------------------+-----------------+------------------+
|                    26 | Average | 1 Mondays    |                 977 |   39.4142653846 |   -93.4893707692 |
|                    26 | Average | 2 Tuesdays   |                 977 |   39.4142653846 |   -93.4893707692 |
|                    26 | Average | 3 Wednesdays |                 977 |   39.4142653846 |   -93.4893707692 |
|                    26 | Average | 4 Thursdays  |                 977 |   39.4142653846 |   -93.4893707692 |
|                    26 | Average | 5 Fridays    |                 977 |   39.4142653846 |   -93.4893707692 |
|                    26 | Average | 6 Saturdays  |                 977 |   39.4142653846 |   -93.4893707692 |
|                    23 | Average | 7 Sundays    |                 947 |   38.7825304348 |   -95.5721147826 |
|                    63 | Nice    | 1 Mondays    |                8915 |   36.9369190476 |   -108.887882381 |
|                    63 | Nice    | 2 Tuesdays   |                8915 |   36.9369190476 |   -108.887882381 |
|                    64 | Nice    | 3 Wednesdays |                9004 |    37.041684375 |   -108.427237344 |
|                    64 | Nice    | 4 Thursdays  |                9004 |    37.041684375 |   -108.427237344 |
|                    61 | Nice    | 5 Fridays    |                8971 |   37.0835360656 |   -108.089085082 |
|                    58 | Nice    | 6 Saturdays  |                8959 |   37.1345948276 |   -107.721951552 |
|                    44 | Nice    | 7 Sundays    |                8314 |   37.1966818182 |     -107.7040725 |
+-----------------------+---------+--------------+---------------------+-----------------+------------------+
		
		
2. Group business based on the ones that are open and the ones that are closed.
What differences can you find between the ones that are still open and the ones
that are closed? List at least two differences and the SQL code you used to
arrive at your answer.
		
i. Difference 1:
         
The amount of reviews for the closed places is smaller than for the open
business.         
         
ii. Difference 2:
         
The open business have a relatively higher amount of high star ratings.
         
SQL code used for analysis:

SELECT
    is_open,
    stars,
    sum(review_count),
    COUNT(*)
FROM business
GROUP BY is_open, stars;

+---------+-------+-------------------+----------+
| is_open | stars | sum(review_count) | COUNT(*) |
+---------+-------+-------------------+----------+
|       0 |   1.0 |                68 |       14 |
|       0 |   1.5 |               219 |       24 |
|       0 |   2.0 |              1193 |       94 |
|       0 |   2.5 |              3352 |      168 |
|       0 |   3.0 |              5898 |      272 |
|       0 |   3.5 |              9114 |      295 |
|       0 |   4.0 |              9699 |      326 |
|       0 |   4.5 |              4881 |      189 |
|       0 |   5.0 |               837 |      138 |
|       1 |   1.0 |               893 |      142 |
|       1 |   1.5 |              2443 |      182 |
|       1 |   2.0 |              6627 |      472 |
|       1 |   2.5 |             13456 |      722 |
|       1 |   3.0 |             30397 |     1124 |
|       1 |   3.5 |             62211 |     1483 |
|       1 |   4.0 |             87345 |     1679 |
|       1 |   4.5 |             49057 |     1249 |
|       1 |   5.0 |             16871 |     1427 |
+---------+-------+-------------------+----------+
	
	
3. For this last part of your analysis, you are going to choose the type of
analysis you want to conduct on the Yelp dataset and are going to prepare the
data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for
sentiment analysis, clustering businesses to find commonalities or anomalies
between them, predicting the overall star rating for a business, predicting the
number of fans a user will have, and so on. These are just a few examples to get
you started, so feel free to be creative and come up with your own problem you
want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
         
Do more experienced users give different ratings?
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your
analysis and why you chose that data:

First I classify the amount of reviews per user into 6 different bins:

 - 'Newbie', less than 10 reviews
 - 'Rookie', between 11 and 100 reviews
 - 'Junior', between 101 and 500 reviews
 - 'Senior', between 501 and 1000 reviews
 - 'Pro', between 1001 and 1500 reviews
 - 'Ace', more than 1500 Reviews

 With that data the average scores for each review is calculated.
                  
iii. Output of your finished dataset:

It seems, that the 'Pro' users tend to a slightly higher rating, whereas the
'Newbies' are more strict.         
         
iv. Provide the SQL code you used to create your final dataset:

SELECT
    CASE
        WHEN review_count <= 10 THEN 'Newbie'
        WHEN review_count BETWEEN 11 AND 100 THEN 'Rookie'
        WHEN review_count BETWEEN 101 AND 500 THEN 'Junior'
        WHEN review_count BETWEEN 501 AND 1000 THEN 'Senior'
        WHEN review_count BETWEEN 1001 AND 1500 THEN 'Pro'
        WHEN review_count > 1500 THEN 'Ace'
    END AS reviewscount,
    AVG(average_stars)
FROM user
GROUP BY reviewscount;

+--------------+--------------------+
| reviewscount | AVG(average_stars) |
+--------------+--------------------+
| Ace          |               3.51 |
| Junior       |       3.7582173913 |
| Newbie       |      3.66909831122 |
| Pro          |      3.84666666667 |
| Rookie       |      3.75961538462 |
| Senior       |            3.73875 |
+--------------+--------------------+