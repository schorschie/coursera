Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 	10000
ii. Business table = 	10000
iii. Category table = 	10000
iv. Checkin table = 	10000
v. elite_years table = 	10000
vi. friend table = 	10000
vii. hours table = 	10000
viii. photo table = 	10000
ix. review table = 	10000
x. tip table = 		10000
xi. user table = 	10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 	10000 	Primary Key
ii. Hours = 	1562 	Foreign Key: business_id
iii. Category = 2693 	Foreign Key: business_id
iv. Attribute = 1115 	Foreign Key: business_id
v. Review = 	10000 	Primary Key
vi. Checkin = 	493 	Foreign Key: business_id
vii. Photo =	10000	Primary Key
viii. Tip = 	537 	Foreign Key: user_id -OR- 3979	Foreign Key: business_id
ix. User = 	10000	Primary Key
x. Friend = 	11 	Foreign Key: user_id
xi. Elite_years =2780	Foreign Key: user_id

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:
	
	SELECT *

	FROM User
	
WHERE 	(id IS NULL) OR 
      
		(name IS NULL) OR 
      
		(review_count IS NULL) OR
      
		(yelping_since is NULL) OR 
      
		(useful IS NULL) OR
     
		(funny IS NULL) OR 
      
		(cool IS NULL) OR 
      
		(fans IS NULL) OR 
     
		(average_stars IS NULL) OR 
      
		(compliment_hot IS NULL) OR 
      
		(compliment_more IS NULL) OR 
      
		(compliment_profile IS NULL) OR 
      
		(compliment_cute IS NULL) OR 
      
		(compliment_list IS NULL) OR 
      
		(compliment_note IS NULL) OR 
      
		(compliment_plain IS NULL) OR 
     
		(compliment_cool IS NULL) OR 
      
		(compliment_funny IS NULL) OR 
      
		(compliment_writer IS NULL) OR 
      
		(compliment_photos IS NULL)

	;
	
	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1		max: 5		avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min: 1,0	max: 5,0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000 	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
	SELECT City,
		COUNT(review_count) AS Review_count
	FROM Business
	GROUP BY City
	ORDER BY Review_count DESC
	;

	Copy and Paste the Result Below:

+-----------------+--------------+
| city            | Review_count |
+-----------------+--------------+
| Las Vegas       |         1561 |
| Phoenix         |         1001 |
| Toronto         |          985 |
| Scottsdale      |          497 |
| Charlotte       |          468 |
| Pittsburgh      |          353 |
| Montréal        |          337 |
| Mesa            |          304 |
| Henderson       |          274 |
| Tempe           |          261 |
| Edinburgh       |          239 |
| Chandler        |          232 |
| Cleveland       |          189 |
| Gilbert         |          188 |
| Glendale        |          188 |
| Madison         |          176 |
| Mississauga     |          150 |
| Stuttgart       |          141 |
| Peoria          |          105 |
| Markham         |           80 |
| Champaign       |           71 |
| North Las Vegas |           70 |
| North York      |           64 |
| Surprise        |           60 |
| Richmond Hill   |           54 |
+-----------------+--------------+

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT city, stars, review_count 

FROM business 

WHERE city = 'Avon' 

GROUP BY stars

;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+------+-------+--------------+
| city | stars | review_count |
+------+-------+--------------+
| Avon |   1.5 |           10 |
| Avon |   2.5 |            3 |
| Avon |   3.5 |           50 |
| Avon |   4.0 |           17 |
| Avon |   4.5 |           31 |
| Avon |   5.0 |            3 |
+------+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:
	
SELECT city, stars, review_count 

FROM business 

WHERE city = 'Beachwood' 

GROUP BY stars

;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
	
+-----------+-------+--------------+
| city      | stars | review_count |
+-----------+-------+--------------+
| Beachwood |   2.0 |            8 |
| Beachwood |   2.5 |            3 |
| Beachwood |   3.0 |            3 |
| Beachwood |   3.5 |            3 |
| Beachwood |   4.0 |           69 |
| Beachwood |   4.5 |            3 |
| Beachwood |   5.0 |            4 |
+-----------+-------+--------------+

7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
	
	SELECT u.name, u.review_count
	
FROM User u 

	ORDER BY review_count DESC
	
LIMIT 3

	;

		
	Copy and Paste the Result Below:
		
	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
	SELECT name, review_count, fans,

	CASE
  
		WHEN review_count >= 1500 THEN 'large amount'
  
		WHEN review_count >= 1000 THEN 'medium'
  
		WHEN review_count < 1000  THEN 'Small'
  
		ELSE 'Other'
  
		END AS category
	

FROM user 

	ORDER BY fans DESC

	;
	
	Above is the code I wrote to discover if there was a correlation between 
	fans and amount of reviews. The results are published under my answer. 
	What I started with is selecting the right variables. Afterwards, I 
	categorized the amount of reviews. I did this because it was easier to spot 
	correlation. What finished this statement is the sorting. I did this by using
	the ORDER BY statement on the column 'fans'. This brought me a view of the top
	user account considering the amount of fans. If the category column would show
	all 'large amount' user accounts with the most fans, there would be a strong 
	correlation. 

	Because many of the top account considering facts have the category
	'small', I would like to state there is no correlation between amount of reviews 
	and fans.  
	

	+-----------+--------------+------+--------------+
	| name      | review_count | fans | category     |
	+-----------+--------------+------+--------------+
	| Amy       |          609 |  503 | Small        |
	| Mimi      |          968 |  497 | Small        |
	| Harald    |         1153 |  311 | medium       |
	| Gerald    |         2000 |  253 | large amount |
	| Christine |          930 |  173 | Small        |
	| Lisa      |          813 |  159 | Small        |
	| Cat       |          377 |  133 | Small        |
	| William   |         1215 |  126 | medium       |
	| Fran      |          862 |  124 | Small        |
	| Lissa     |          834 |  120 | Small        |
	| Mark      |          861 |  115 | Small        |
	| Tiffany   |          408 |  111 | Small        |
	| bernice   |          255 |  105 | Small        |
	| Roanna    |         1039 |  104 | medium       |
	| Angela    |          694 |  101 | Small        |
	| .Hon      |         1246 |  101 | medium       |
	| Ben       |          307 |   96 | Small        |
	| Linda     |          584 |   89 | Small        |
	| Christina |          842 |   85 | Small        |
	| Jessica   |          220 |   84 | Small        |	
	| Greg      |          408 |   81 | Small        |
	| Nieves    |          178 |   80 | Small        |
	| Sui       |          754 |   78 | Small        |
	| Yuri      |         1339 |   76 | medium       |
	| Nicole    |          161 |   73 | Small        |
	+-----------+--------------+------+--------------+ 
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:

	There are more reviews with love than with hate. 

	+-----------+----------+
	| count(id) | lovehate |
	+-----------+----------+
	|       178 | Hate     |
	|      1780 | Love     |
	|      8042 | other    |
	+-----------+----------+
	
	SQL code used to arrive at answer:
	
	SELECT count(id), 
	

CASE 
		
WHEN text LIKE '%love%' THEN 'Love'
		
WHEN text LIKE '%Hate%' THEN 'Hate'

		ELSE 'other'

		END AS lovehate


	FROM review

	GROUP BY lovehate

	;
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
	SELECT name, fans
	
FROM user
	
ORDER BY fans DESC
	
LIMIT 10

	;

	
	Copy and Paste the Result Below:
	+-----------+------+
	| name      | fans |
	+-----------+------+
	| Amy       |  503 |
	| Mimi      |  497 |
	| Harald    |  311 |	
	| Gerald    |  253 |
	| Christine |  173 |
	| Lisa      |  159 |
	| Cat       |  133 |
	| William   |  126 |
	| Fran      |  124 |
	| Lissa     |  120 |
	+-----------+------+
	
	
11. Is there a strong relationship (or correlation) between having a high number of fans 
	and being listed as "useful" or "funny?" 
	Out of the top 10 users with the highest number of fans, 
	what percent are also listed as “useful” or “funny”?

Key:
0% - 25% - Low relationship
26% - 75% - Medium relationship
76% - 100% - Strong relationship
	
	SQL code used to arrive at answer:
	
	SELECT 	name
		,fans	
      
		,useful	
      
		,funny 
      
		,funny + useful AS combination
	,
CASE 
		
		WHEN ((fans / (funny + useful)) * 100) < 0.25 THEN "Low relationship"

		WHEN ((fans / (funny + useful)) * 100) BETWEEN 0.26
 AND 0.75
 THEN "Medium relationship"
	
		WHEN ((fans / (funny + useful)) * 100) >= 0.76
 THEN "Strong relationship"
 
		ELSE "other"
		
END relationship
	
FROM user

	ORDER BY fans DESC
		, useful DESC
		, funny DESC

	LIMIT 10

	;
	
	Copy and Paste the Result Below:
	
	-----------+------+--------+--------+-------------+---------------------+
	| name      | fans | useful |  funny | combination | relationship        |
	+-----------+------+--------+--------+-------------+---------------------+
	| Amy       |  503 |   3226 |   2554 |        5780 | Low relationship    |
	| Mimi      |  497 |    257 |    138 |         395 | Strong relationship |
	| Harald    |  311 | 122921 | 122419 |      245340 | Low relationship    |
	| Gerald    |  253 |  17524 |   2324 |       19848 | Low relationship    |
	| Christine |  173 |   4834 |   6646 |       11480 | Low relationship    |
	| Lisa      |  159 |     48 |     13 |          61 | Strong relationship |
	| Cat       |  133 |   1062 |    672 |        1734 | Low relationship    |
	| William   |  126 |   9363 |   9361 |       18724 | Low relationship    |
	| Fran      |  124 |   9851 |   7606 |       17457 | Low relationship    |
	| Lissa     |  120 |    455 |    150 |         605 | Low relationship    |
	+-----------+------+--------+--------+-------------+---------------------+
	
	Please explain your findings and interpretation of the results:

	I will walk through the code. First I have selected the columns i deemed necessary. 
	Afterwards I wanted to combine the funny and useful column, this becomes useful in the
	case function. 
	The case function categorizes the variables by calculating the amount of fans that users have
	besides having useful or funny as a compliment. This includes users having either funny or useful. 
	It is not necessary to have both useful and funny. By sorting in descending order and limiting 
	the outcome, the table only shows the 10 users with the most fans. 

	Judging by the outcome, there is no correlation between these variables because most of the
	relationships are classified as low. 
	
	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

The distribution of hours is not correlated to the rating. If I run a query, I seems that 
my 2 hypothesis are not confirmed. One being: The restaurants that are opened longer have a
higher rating and the second being: The restaurants that are opened shorter have a higher rating. 
The table below shows both these hypotesis cannot be confirmed. 
+------------------+---------+----------------------+--------------+-------------+--------------+
| name             | city    | hours                | review_count | category    | Starcategory |
+------------------+---------+----------------------+--------------+-------------+--------------+
| Big Smoke Burger | Toronto | Friday|10:30-21:00   |           47 | Restaurants | 2-3          |
| 99 Cent Sushi    | Toronto | Friday|11:00-23:00   |            5 | Restaurants | 2-3          |
| Sushi Osaka      | Toronto | Friday|11:00-23:00   |            8 | Restaurants | 4-5          |
| Edulis           | Toronto | Friday|18:00-23:00   |           89 | Restaurants | 4-5          |
| Cabin Fever      | Toronto | Friday|18:00-2:00    |           26 | Restaurants | 4-5          |
| Pizzaiolo        | Toronto | Friday|9:00-4:00     |           34 | Restaurants | 2-3          |
| Big Smoke Burger | Toronto | Monday|10:30-21:00   |           47 | Restaurants | 2-3          |
| 99 Cent Sushi    | Toronto | Monday|11:00-23:00   |            5 | Restaurants | 2-3          |
| Sushi Osaka      | Toronto | Monday|11:00-23:00   |            8 | Restaurants | 4-5          |
| Cabin Fever      | Toronto | Monday|16:00-2:00    |           26 | Restaurants | 4-5          |
| Pizzaiolo        | Toronto | Monday|9:00-23:00    |           34 | Restaurants | 2-3          |
| Pizzaiolo        | Toronto | Saturday|10:00-4:00  |           34 | Restaurants | 2-3          |
| Big Smoke Burger | Toronto | Saturday|10:30-21:00 |           47 | Restaurants | 2-3          |
| 99 Cent Sushi    | Toronto | Saturday|11:00-23:00 |            5 | Restaurants | 2-3          |
| Sushi Osaka      | Toronto | Saturday|11:00-23:00 |            8 | Restaurants | 4-5          |
| Cabin Fever      | Toronto | Saturday|16:00-2:00  |           26 | Restaurants | 4-5          |
| Edulis           | Toronto | Saturday|18:00-23:00 |           89 | Restaurants | 4-5          |
| Pizzaiolo        | Toronto | Sunday|10:00-23:00   |           34 | Restaurants | 2-3          |
| Big Smoke Burger | Toronto | Sunday|11:00-19:00   |           47 | Restaurants | 2-3          |
| 99 Cent Sushi    | Toronto | Sunday|11:00-23:00   |            5 | Restaurants | 2-3          |
| Edulis           | Toronto | Sunday|12:00-16:00   |           89 | Restaurants | 4-5          |
| Sushi Osaka      | Toronto | Sunday|14:00-23:00   |            8 | Restaurants | 4-5          |
| Cabin Fever      | Toronto | Sunday|16:00-2:00    |           26 | Restaurants | 4-5          |
| Big Smoke Burger | Toronto | Thursday|10:30-21:00 |           47 | Restaurants | 2-3          |
| 99 Cent Sushi    | Toronto | Thursday|11:00-23:00 |            5 | Restaurants | 2-3          |
+------------------+---------+----------------------+--------------+-------------+--------------+
(Output limit exceeded, 25 of 40 total rows shown)

QUERY: 
SELECT  b.name,

        b.city,

        h.hours,

        b.review_count,

        c.category,

CASE 
    
	WHEN b.stars < 2 THEN 'less than 2'
    
	WHEN b.stars >=2 AND b.stars < 4 THEN '2-3'
    
	WHEN b.stars >=4 THEN '4-5'
    
	ELSE 'other'
    
	END Starcategory
    

FROM ((business b INNER JOIN category c ON b.id=c.business_id) 
	INNER JOIN hours h ON b.id=h.business_id)

WHERE c.category= 'Restaurants' AND b.city = 'Toronto'

ORDER BY h.hours, Starcategory   

;

ii. Do the two groups you chose to analyze have a different number of reviews?

No, there is no correlation between the number of reviews and the rating that the restaurants have.




QUERY: 
SELECT  b.name,
        
	b.city,

        h.hours,

        b.review_count,

        c.category,
CASE 
    
	WHEN b.stars < 2 THEN 'less than 2'

    	WHEN b.stars >=2 AND b.stars < 4 THEN '2-3'
    
	WHEN b.stars >=4 THEN '4-5'
    
	ELSE 'other'
    
	END Starcategory
    

FROM ((business b INNER JOIN category c ON b.id=c.business_id) 
	INNER JOIN hours h ON b.id=h.business_id)

WHERE c.category= 'Restaurants' AND b.city = 'Toronto'

ORDER BY h.hours, b.review_count DESC 
;
         
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

I am not able to infer anything from the location. There are no significant correlations between ratings and location.

+---------------+---------+------------------------+----------------------+--------------+-------------+--------------+
| name          | city    | neighborhood           | hours                | review_count | category    | Starcategory |
+---------------+---------+------------------------+----------------------+--------------+-------------+--------------+
| Pizzaiolo     | Toronto | Entertainment District | Saturday|10:00-4:00  |           34 | Restaurants | 2-3          |
| Sushi Osaka   | Toronto | Etobicoke              | Saturday|11:00-23:00 |            8 | Restaurants | 4-5          |
| 99 Cent Sushi | Toronto | Downtown Core          | Saturday|11:00-23:00 |            5 | Restaurants | 2-3          |
| Cabin Fever   | Toronto | High Park              | Saturday|16:00-2:00  |           26 | Restaurants | 4-5          |
| Edulis        | Toronto | Niagara                | Saturday|18:00-23:00 |           89 | Restaurants | 4-5          |
+---------------+---------+------------------------+----------------------+--------------+-------------+--------------+

QUERY:
SELECT  b.name,

        b.city,
 
	b.neighborhood,

        h.hours,

        b.review_count,

        c.category,

CASE 
    
	WHEN b.stars < 2 THEN 'less than 2'

    	WHEN b.stars >=2 AND b.stars < 4 THEN '2-3'

    	WHEN b.stars >=4 THEN '4-5'
    
	ELSE 'other'
    
	END Starcategory
    

FROM ((business b INNER JOIN category c ON b.id=c.business_id) 
	INNER JOIN hours h ON b.id=h.business_id)

WHERE c.category= 'Restaurants' AND b.city = 'Toronto'

GROUP BY b.neighborhood

ORDER BY h.hours, b.review_count DESC 


;

		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: businesses that are open have a higher average rating than those that are closed. 
         
         
ii. Difference 2: Business that are open have a higher amount of ratings than businesses that are closed. 
         
         
         
SQL code used for analysis:

SELECT DISTINCT (b.id)
, 
	AVG(b.stars),     
	SUM(b.review_count)

FROM Business b

GROUP BY is_open
;
		
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

I have chosen to find out if a stated price perception in the text of a review would have influence on the average rating of the business in the review. 
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
 
The data I deem necessary for this experiment is firstly the text of the review. Because this contains 
a lot of text, I will create a case that finds the word cheap or expensive. During a trail query, I found the 
word non-expensive. Because of this I will insert a space before the words cheap and expensive (' cheap' and ' expensive').
Besides the rating, I would also like to see if average amount of stars has any significance in 
regards to the price perception. For this, I will include the average amount of stars. 
To create a table in which I can easily read the results, I will classify the amount of stars too. 

I realize this research will not include all reviews in which people consider the business cheap or expensive. 
It will also include comments like 'not expensive and not cheap' and will exclude comments like 'I thought I had to pay
a lot of money for the service' for example. That is also not what I am researching. 
I am only looking at the presence of the word cheap or expensive in the comment and if this has any affect on the rating. It measures
if a price perception has any influence on the rating. 
                         
                  
iii. Output of your finished dataset:

+-------------+---------------+---------------------+----------------+
| count(r.id) |  AVG(r.stars) | Price_perception    | Star_category  |
+-------------+---------------+---------------------+----------------+
|          42 | 1.38095238095 | Cheap               | 1Low_Rating    |
|          66 | 1.51515151515 | Expensive           | 1Low_Rating    |
|        2121 | 1.37105139085 | No_Price_Perception | 1Low_Rating    |
|          86 | 3.59302325581 | Cheap               | 2Medium_Rating |
|         113 | 3.61061946903 | Expensive           | 2Medium_Rating |
|        3421 | 3.66676410406 | No_Price_Perception | 2Medium_Rating |
|          46 |           5.0 | Cheap               | 3High_Rating   |
|          60 |           5.0 | Expensive           | 3High_Rating   |
|        4045 |           5.0 | No_Price_Perception | 3High_Rating   |
+-------------+---------------+---------------------+----------------+



iv. Provide the SQL code you used to create your final dataset:

SELECT count(r.id),
        AVG(r.stars),

CASE
  WHEN r.text LIKE '% expensive%' THEN 'Expensive'
  WHEN r.text LIKE '% cheap %' THEN 'Cheap'
  ELSE 'No_Price_Perception'
  END Price_perception,

CASE 
  WHEN r.stars <3 THEN '1Low_Rating'
  WHEN r.stars BETWEEN 3 AND 4 THEN '2Medium_Rating'
  WHEN r.stars >= 4 THEN '3High_Rating'
  END Star_category

FROM review r
GROUP BY Price_perception, Star_category
ORDER BY r.stars, Price_perception, Star_category
;